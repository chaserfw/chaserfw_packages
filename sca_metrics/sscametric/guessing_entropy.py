"""
@author: Servio Paguada
"""
import numpy as np
import random
import math

from sutils import trange

AES_Sbox = np.array([
	0x63, 0x7C, 0x77, 0x7B, 0xF2, 0x6B, 0x6F, 0xC5, 0x30, 0x01, 0x67, 0x2B, 0xFE, 0xD7, 0xAB, 0x76,
	0xCA, 0x82, 0xC9, 0x7D, 0xFA, 0x59, 0x47, 0xF0, 0xAD, 0xD4, 0xA2, 0xAF, 0x9C, 0xA4, 0x72, 0xC0,
	0xB7, 0xFD, 0x93, 0x26, 0x36, 0x3F, 0xF7, 0xCC, 0x34, 0xA5, 0xE5, 0xF1, 0x71, 0xD8, 0x31, 0x15,
	0x04, 0xC7, 0x23, 0xC3, 0x18, 0x96, 0x05, 0x9A, 0x07, 0x12, 0x80, 0xE2, 0xEB, 0x27, 0xB2, 0x75,
	0x09, 0x83, 0x2C, 0x1A, 0x1B, 0x6E, 0x5A, 0xA0, 0x52, 0x3B, 0xD6, 0xB3, 0x29, 0xE3, 0x2F, 0x84,
	0x53, 0xD1, 0x00, 0xED, 0x20, 0xFC, 0xB1, 0x5B, 0x6A, 0xCB, 0xBE, 0x39, 0x4A, 0x4C, 0x58, 0xCF,
	0xD0, 0xEF, 0xAA, 0xFB, 0x43, 0x4D, 0x33, 0x85, 0x45, 0xF9, 0x02, 0x7F, 0x50, 0x3C, 0x9F, 0xA8,
	0x51, 0xA3, 0x40, 0x8F, 0x92, 0x9D, 0x38, 0xF5, 0xBC, 0xB6, 0xDA, 0x21, 0x10, 0xFF, 0xF3, 0xD2,
	0xCD, 0x0C, 0x13, 0xEC, 0x5F, 0x97, 0x44, 0x17, 0xC4, 0xA7, 0x7E, 0x3D, 0x64, 0x5D, 0x19, 0x73,
	0x60, 0x81, 0x4F, 0xDC, 0x22, 0x2A, 0x90, 0x88, 0x46, 0xEE, 0xB8, 0x14, 0xDE, 0x5E, 0x0B, 0xDB,
	0xE0, 0x32, 0x3A, 0x0A, 0x49, 0x06, 0x24, 0x5C, 0xC2, 0xD3, 0xAC, 0x62, 0x91, 0x95, 0xE4, 0x79,
	0xE7, 0xC8, 0x37, 0x6D, 0x8D, 0xD5, 0x4E, 0xA9, 0x6C, 0x56, 0xF4, 0xEA, 0x65, 0x7A, 0xAE, 0x08,
	0xBA, 0x78, 0x25, 0x2E, 0x1C, 0xA6, 0xB4, 0xC6, 0xE8, 0xDD, 0x74, 0x1F, 0x4B, 0xBD, 0x8B, 0x8A,
	0x70, 0x3E, 0xB5, 0x66, 0x48, 0x03, 0xF6, 0x0E, 0x61, 0x35, 0x57, 0xB9, 0x86, 0xC1, 0x1D, 0x9E,
	0xE1, 0xF8, 0x98, 0x11, 0x69, 0xD9, 0x8E, 0x94, 0x9B, 0x1E, 0x87, 0xE9, 0xCE, 0x55, 0x28, 0xDF,
	0x8C, 0xA1, 0x89, 0x0D, 0xBF, 0xE6, 0x42, 0x68, 0x41, 0x99, 0x2D, 0x0F, 0xB0, 0x54, 0xBB, 0x16
], dtype=np.uint8)

#======================================================================================
# Objective: GE
def rk_key(rank_array, key):
	key_val = rank_array[key]
	final_rank = np.float32(np.where(np.sort(rank_array)[::-1] == key_val)[0][0])
	if math.isnan(float(final_rank)) or math.isinf(float(final_rank)):
		return np.float32(256)
	else:
		return np.float32(final_rank)
#======================================================================================
# Compute the evolution of rank
def rank_compute(prediction, att_plt, byte, output_rank, correct_key, leakage='ID'):
	hw = None
	if leakage != 'ID':
		hw = [bin(x).count("1") for x in range(256)]

	(nb_traces, nb_hyp) = prediction.shape

	key_log_prob = np.zeros(256)
	prediction = np.log(prediction + 1e-40)
	rank_evol = np.full(nb_traces, 255)

	for i in range(nb_traces):
		for k in range(256):
			# Computes the hypothesis values
			if leakage == 'ID':
				key_log_prob[k] += prediction[i, AES_Sbox[k ^ int(att_plt[i, byte])]]
			else:
				key_log_prob[k] += prediction[i, hw[AES_Sbox[k ^ int(att_plt[i, byte])]]]
		rank_evol[i] = rk_key(key_log_prob, correct_key)

	if output_rank:
		return rank_evol
	else:
		return key_log_prob
#======================================================================================
def perform_attacks(nb_traces, predictions, plt_attack, correct_key:int, leakage='ID', 
					nb_attacks=1, byte=2, shuffle=True, output_rank=False, pbar=False):
	(nb_total, nb_hyp) = predictions.shape
	all_rk_evol = np.zeros((nb_attacks, nb_traces))
	att_pred = None
	att_plt  = None

	chosen_range = range(nb_attacks)
	if pbar:
		chosen_range = trange(nb_attacks, desc='[INFO]: Performing attack')
		
	for i in chosen_range:
		if shuffle:
			l = list(zip(predictions, plt_attack))
			random.shuffle(l)
			sp, splt = list(zip(*l))
			sp = np.array(sp)
			splt = np.array(splt)
			att_pred = sp[:nb_traces]
			att_plt = splt[:nb_traces]

		else:
			att_pred = predictions[:nb_traces]
			att_plt = plt_attack[:nb_traces]
			
		key_log_prob = rank_compute(att_pred, att_plt, byte, 
									output_rank, correct_key, leakage=leakage)
		if output_rank:
			all_rk_evol[i] = key_log_prob

	if output_rank:
		return np.mean(all_rk_evol,axis=0)  
	else:
		return np.float32(key_log_prob)
#======================================================================================
if __name__ == "__main__":
	#perform_attacks(5000, predictions, plt_attack, nb_attacks=10, byte=2, shuffle=True, output_rank=True)
	pass